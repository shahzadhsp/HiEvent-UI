-keep enum j$.time.DayOfWeek {
}
-keep class j$.time.Instant {
  public j$.time.OffsetDateTime atOffset(j$.time.ZoneOffset);
  public static j$.time.Instant now();
  public long toEpochMilli();
  public java.lang.String toString();
  public j$.time.Instant truncatedTo(j$.time.temporal.TemporalUnit);
}
-keep class j$.time.LocalDateTime {
  public java.lang.String format(j$.time.format.DateTimeFormatter);
  public static j$.time.LocalDateTime parse(java.lang.CharSequence);
  public j$.time.LocalDateTime plusDays(long);
  public j$.time.LocalDateTime plusWeeks(long);
}
-keep class j$.time.OffsetDateTime {
  public j$.time.LocalDateTime toLocalDateTime();
}
-keep class j$.time.ZoneId {
  public static j$.time.ZoneId of(java.lang.String);
  public java.lang.String toString();
}
-keep class j$.time.ZoneOffset {
  j$.time.ZoneOffset UTC;
}
-keep class j$.time.ZonedDateTime {
  public int getDayOfMonth();
  public j$.time.DayOfWeek getDayOfWeek();
  public int getHour();
  public int getMinute();
  public int getMonthValue();
  public int getNano();
  public int getSecond();
  public int getYear();
  public static j$.time.ZonedDateTime now(j$.time.ZoneId);
  public static j$.time.ZonedDateTime of(int,int,int,int,int,int,int,j$.time.ZoneId);
  public static j$.time.ZonedDateTime of(j$.time.LocalDateTime,j$.time.ZoneId);
  public j$.time.ZonedDateTime plusDays(long);
}
-keep interface j$.time.chrono.ChronoZonedDateTime {
  public boolean isBefore(j$.time.chrono.ChronoZonedDateTime);
  public j$.time.Instant toInstant();
}
-keep class j$.time.format.DateTimeFormatter {
  public java.lang.String format(j$.time.temporal.TemporalAccessor);
  j$.time.format.DateTimeFormatter ISO_LOCAL_DATE;
  j$.time.format.DateTimeFormatter ISO_LOCAL_DATE_TIME;
}
-keep enum j$.time.temporal.ChronoUnit {
  public long between(j$.time.temporal.Temporal,j$.time.temporal.Temporal);
  j$.time.temporal.ChronoUnit MILLIS;
  j$.time.temporal.ChronoUnit SECONDS;
}
-keep interface j$.time.temporal.Temporal {
}
-keep interface j$.time.temporal.TemporalAccessor {
}
-keep interface j$.time.temporal.TemporalUnit {
}
-keep class j$.util.DateRetargetClass {
  public static j$.time.Instant toInstant(java.util.Date);
}
-keep class j$.util.DesugarCalendar {
  public static j$.time.Instant toInstant(java.util.Calendar);
}
-keep class j$.util.DesugarTimeZone {
  public static java.util.TimeZone getTimeZone(j$.time.ZoneId);
  public static java.util.TimeZone getTimeZone(java.lang.String);
}
-keep class j$.util.TimeZoneRetargetClass {
  public static j$.time.ZoneId toZoneId(java.util.TimeZone);
}
